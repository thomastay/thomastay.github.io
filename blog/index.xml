<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas Tay&#39;s blog</title>
    <link>https://thomastay.dev/blog/</link>
    <description>Recent content on Thomas Tay&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Apr 2024 00:31:00 -0700</lastBuildDate>
    <atom:link href="https://thomastay.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Built a Telegram Summarization Bot</title>
      <link>https://thomastay.dev/blog/how-i-built-a-telegram-summarization-bot/</link>
      <pubDate>Thu, 11 Apr 2024 00:31:00 -0700</pubDate>
      <guid>https://thomastay.dev/blog/how-i-built-a-telegram-summarization-bot/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on a Telegram bot that summarizes articles in 5 bullet points.&lt;/p&gt;&#xA;&lt;p&gt;Why?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ideal for breaking news, saving time compared to reading the entire article&lt;/li&gt;&#xA;&lt;li&gt;Helps you in deciding whether to read the full article&lt;/li&gt;&#xA;&lt;li&gt;Acts as a Table of Contents for longer articles to guide you as you read&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a video demonstration of the bot in action:&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;max-width: 60%; margin: 0 auto;&#34;&gt;&#xA;&lt;video style=&#34;width: 100%&#34; autoplay controls&gt;&#xA;  &lt;source src=&#34;Screen%20Recording%202024-02-29%20at%2011.53.09%20AM.mov&#34; type=&#34;video/mp4&#34;&gt;&#xA;  Your browser does not support the video tag.&#xA;&lt;/video&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The bot works on articles of any length. For example, it can summarize &lt;a href=&#34;https://danluu.com/cocktail-ideas/&#34;&gt;danluu&amp;rsquo;s article on cocktail ideas&lt;/a&gt;, which is about 6.6k words, in a few seconds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decompressing a gzip file by hand (sorta), part 2: Now with Huffman!</title>
      <link>https://thomastay.dev/blog/decompressing_gzip_2/</link>
      <pubDate>Fri, 01 Dec 2023 03:00:59 -0700</pubDate>
      <guid>https://thomastay.dev/blog/decompressing_gzip_2/</guid>
      <description>&lt;p&gt;&lt;em&gt;Part 1 here:&lt;/em&gt; &lt;a href=&#34;https://thomastay.dev/blog/blog/gzip_investigations&#34;&gt;Link to part 1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s decompress a gzip file by hand, just &lt;a href=&#34;https://thomastay.dev/blog/blog/gzip_investigations&#34;&gt;like we did last time in part 1&lt;/a&gt;, but this time let&amp;rsquo;s decode the decompressed huffman codes too.&lt;/p&gt;&#xA;&lt;p&gt;Start by writing some data to disk:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo &amp;#34;hector the frantic father on an anchor or a rare fat cat sat on the ranch&amp;#34; &amp;gt; test-huff.txt&#xA;$ xxd test-huff.txt&#xA;00000000: 6865 6374 6f72 2074 6865 2066 7261 6e74  hector the frant&#xA;00000010: 6963 2066 6174 6865 7220 6f6e 2061 6e20  ic father on an&#xA;00000020: 616e 6368 6f72 206f 7220 6120 7261 7265  anchor or a rare&#xA;00000030: 2066 6174 2063 6174 2073 6174 206f 6e20   fat cat sat on&#xA;00000040: 7468 6520 7261 6e63 680a                 the ranch.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our file is 74 bytes this time, and specifically chosen to use only 13 characters:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Domain Moved</title>
      <link>https://thomastay.dev/blog/domain-moved-1/</link>
      <pubDate>Tue, 21 Mar 2023 14:43:03 +0800</pubDate>
      <guid>https://thomastay.dev/blog/domain-moved-1/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve moved from ttay.me to thomastay.dev, my new domain! I accidentally let the old one expire and now they&amp;rsquo;re charging me $70 to recover it&amp;hellip; for a hobby domain that&amp;rsquo;s too much, man.&lt;/p&gt;&#xA;&lt;p&gt;Hopefully this one will be better, anyway, as it has my name in it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why the Wheel Appeal</title>
      <link>https://thomastay.dev/blog/why-the-wheel-appeal/</link>
      <pubDate>Sat, 11 Feb 2023 01:00:40 -0800</pubDate>
      <guid>https://thomastay.dev/blog/why-the-wheel-appeal/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t understand why the Wheel trading strategy is so popular on Reddit. Am I missing something? This post is a semi coherent ramble where I try and figure out why, oh why, is &lt;strong&gt;the wheel&lt;/strong&gt; so heavily promoted on Reddit.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-the-wheel&#34;&gt;What is the Wheel?&lt;/h2&gt;&#xA;&lt;p&gt;Put simply, the Wheel &lt;em&gt;is a covered call strategy&lt;/em&gt;. That&amp;rsquo;s all it is. Really. Nothing more. A strategy so simple that, by the way, it is literally Chapter 2 of the Options Bible, &lt;em&gt;Options as a Strategic Investment&lt;/em&gt;. And Chapter 1 is definitions. Not that I have anything against Covered Calls, by the way, I use them in my retirement port.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How I Made Wordle Helper</title>
      <link>https://thomastay.dev/blog/how-i-made-wordle-helper/</link>
      <pubDate>Tue, 22 Feb 2022 18:16:00 -0800</pubDate>
      <guid>https://thomastay.dev/blog/how-i-made-wordle-helper/</guid>
      <description>&lt;p&gt;I recently made a web app that helps you play Wordle, everyone&amp;rsquo;s favorite word game. In case you haven&amp;rsquo;t heard of it, Wordle is a game where you try and guess a 5 letter word in 6 tries (just Google it!)&lt;/p&gt;&#xA;&lt;h4 id=&#34;click-here-to-go-to-my-website-and-try-it-outwordle-helper&#34;&gt;&lt;a href=&#34;https://thomastay.dev/blog/wordle-helper&#34;&gt;Click here to go to my website and try it out&lt;/a&gt;.&lt;/h4&gt;&#xA;&lt;p&gt;I thought it might be worth sharing the engineering of how I designed, wrote and published this app. Plenty of people have written&#xA;&lt;a href=&#34;https://github.com/jason-chao/wordle-solver&#34;&gt;much&lt;/a&gt;&#xA;&lt;a href=&#34;https://www.kerrigan.dev/2022/01/10/building-a-wordle-solver-in-python.html&#34;&gt;better&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/theboywhoboasted/whurdle&#34;&gt;wordle&lt;/a&gt;&#xA;&lt;a href=&#34;https://github.com/christiangenco/wordlesolver&#34;&gt;solvers&lt;/a&gt;&#xA;than mine, using&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=v68zYyaEmEA&#34;&gt;cooler techniques like information theory&lt;/a&gt;, unlike my very naive heuristic. I also really like &lt;a href=&#34;https://github.com/norvig/pytudes/blob/main/ipynb/Wordle.ipynb&#34;&gt;Norvig&amp;rsquo;s simple 4 word solution&lt;/a&gt;, designed to be memorizable and usable without the aid of a machine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>100% Reliable and Fast</title>
      <link>https://thomastay.dev/blog/100-reliable-and-fast/</link>
      <pubDate>Sun, 30 Jan 2022 19:31:48 +0800</pubDate>
      <guid>https://thomastay.dev/blog/100-reliable-and-fast/</guid>
      <description>&lt;p&gt;I work on a front end project which has two Git repositories, three completely different build systems, five languages, over 10,000 files and 10 million lines of code. It&amp;rsquo;s been built over six years, with the effort over at least a thousand engineers. At this scale, IDE&amp;rsquo;s just can&amp;rsquo;t work effectively.&lt;/p&gt;&#xA;&lt;p&gt;For instance, Jump to Definition (F12 in vscode) mostly works, except when navigating to a concrete implementation of an interface injected ten files away. Hover-over type declarations mostly works, except when the Typescript server can&amp;rsquo;t resolve a particular namespace because some legacy code fiddled with webpack magic. Automatic renaming within files mostly works, except when someone used the same variable name in a deeply nested closure and Typescript can&amp;rsquo;t infer that because there isn&amp;rsquo;t enough type information to go on. And let&amp;rsquo;s not even talk about renaming across files. You&amp;rsquo;d be better off winning the powerball [1].&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Computer&#39;s no</title>
      <link>https://thomastay.dev/blog/a_computers_no/</link>
      <pubDate>Mon, 27 Dec 2021 17:55:44 -0800</pubDate>
      <guid>https://thomastay.dev/blog/a_computers_no/</guid>
      <description>&lt;h1 id=&#34;a-computers-no&#34;&gt;A Computer&amp;rsquo;s No&lt;/h1&gt;&#xA;&lt;p&gt;A computer&amp;rsquo;s No is the most powerful answer for code quality that has ever&#xA;existed. Unlike the human No, it cannot be bought, bargained, or bullied into&#xA;submission. If a computer says No, that is the end of it; we as the soft pliable&#xA;humans simply have to work around it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;&#xA;&lt;p&gt;The original Apollo guidance computer fit into x bytes. The hard work of many dozens of engineers, squeezing their code into the very last bit. Today the SpaceX Dragon rocket runs Electron for its UI. Would the Apollo engineers not have dreamed to write their business logic in Javascript? Yet they were faced with the harsh reality of manually wiring in their computer ROM.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I made x86 flags</title>
      <link>https://thomastay.dev/blog/i_made_x86_flags/</link>
      <pubDate>Sat, 06 Nov 2021 12:16:51 -0700</pubDate>
      <guid>https://thomastay.dev/blog/i_made_x86_flags/</guid>
      <description>&lt;p&gt;This is going to be a tiny blog post to say that I&amp;rsquo;ve made a tiny site (microsite?) that&amp;rsquo;s all about x86 flags. I&amp;rsquo;m learning about x86 assembly, SIMD, and microarch these few weeks.&lt;/p&gt;&#xA;&lt;p&gt;The eflags register is really confusing, so i made a tiny simulator to help me remember which flag is which. Particularly the carry and overflow flags, cos f**k whoever thought that was a good way to name their flags.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decompressing a gzip file by hand</title>
      <link>https://thomastay.dev/blog/gzip_investigations/</link>
      <pubDate>Sat, 16 Oct 2021 00:03:59 -0700</pubDate>
      <guid>https://thomastay.dev/blog/gzip_investigations/</guid>
      <description>&lt;p&gt;&lt;em&gt;2024 Update:&lt;/em&gt; &lt;a href=&#34;https://thomastay.dev/blog/blog/decompressing_gzip_2&#34;&gt;Part 2&lt;/a&gt; &lt;em&gt;is out!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s make a gzipped file and see what&amp;rsquo;s in it. We&amp;rsquo;ll keep it simple: just write 8 &amp;lsquo;a&amp;rsquo;s to a file.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo &amp;#34;aaaaaaaa&amp;#34; &amp;gt; test.out&#xA;$ xxd test.out&#xA;00000000: 6161 6161 6161 6161 0a     aaaaaaaa.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see, our file is 9 bytes long. We have 8 &amp;lsquo;a&amp;rsquo; bytes written, plus a Line Feed (LF) character written at the end.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s make the gzip file now. We&amp;rsquo;ll do &lt;code&gt;gzip -1&lt;/code&gt;, since that will use the fastest compression mode and give us more things to talk about.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blub Framework Lifecycle</title>
      <link>https://thomastay.dev/blog/blub-framework-lifecycle/</link>
      <pubDate>Wed, 09 Jun 2021 19:09:23 -0700</pubDate>
      <guid>https://thomastay.dev/blog/blub-framework-lifecycle/</guid>
      <description>&lt;p&gt;&lt;em&gt;Warning: snark&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Blub framework is hacked together in a weekend. It is lean and mean, and solves all the problems of Blub domain.&lt;/li&gt;&#xA;&lt;li&gt;Pre-Blub users look at Blub, think it&amp;rsquo;s really cool but doesn&amp;rsquo;t have any libraries, so they pass.&lt;/li&gt;&#xA;&lt;li&gt;Blub framework is noticed by smart people, who begin building cool, interesting solutions with it.&lt;/li&gt;&#xA;&lt;li&gt;Blub now has its own website and learning guides.&lt;/li&gt;&#xA;&lt;li&gt;`${UNICORN_VIRAL_STARTUP}` adopts Blub, and now everyone pays attention.&lt;/li&gt;&#xA;&lt;li&gt;The first Blub conference is held in San Francisco.&lt;/li&gt;&#xA;&lt;li&gt;$BIG_COMPANY_HERE adopts Blub. Giant codebases are written in Blub. Papers are written about Blub. You can get a career in Blub.&lt;/li&gt;&#xA;&lt;li&gt;Some users complain that apps written in Blub are too slow. Nobody pays attention.&lt;/li&gt;&#xA;&lt;li&gt;Starry-eyed devs try to write lightweight replacements for Blub &lt;em&gt;(blu, lub, blub-lite, lite-blub, pblub)&lt;/em&gt;, but they never seem to gain traction.&lt;/li&gt;&#xA;&lt;li&gt;Blub now has its own extension / plugin ecosystem. Maybe even its own language, conveniently hidden in f&amp;quot;{CURRENT_CONFIG_FORMAT}&amp;quot;.&lt;/li&gt;&#xA;&lt;li&gt;Devs now start to complain about Blub tooling (not Blub) being too heavyweight for their &lt;code&gt;format!(&amp;quot;{} MacBook&amp;quot;, TWO_YEARS_AGO)&lt;/code&gt;. That doesn&amp;rsquo;t stop Blub-standard from being the #1 starred project on Github.&lt;/li&gt;&#xA;&lt;li&gt;Some startups start using Blub for &lt;strong&gt;Glorp&lt;/strong&gt; domain. This horrifies Orange website viewers, but not enough of them to matter.&lt;/li&gt;&#xA;&lt;li&gt;Blub now has its own International Standards Organization and Working groups. They mostly comprise bored megacorp employees trying to get their side projects into Blub.&lt;/li&gt;&#xA;&lt;li&gt;Glorp domain becomes really important, so more devs start using Blub for Glorp domain. Even those that should know better.&lt;/li&gt;&#xA;&lt;li&gt;Users lash out on #{CURRENT_SOCIAL_MEDIA} about slow products and unreliable service. Turns out Blub really only applied to Blub domain, not to Glorp domain. Oops!&lt;/li&gt;&#xA;&lt;li&gt;People try to write new frameworks for Glorp, but their managers keep telling them &amp;ldquo;Don&amp;rsquo;t reinvent the wheel&amp;rdquo; and &amp;ldquo;Reuse legacy code&amp;rdquo; (aka. be fungible).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Blubx&lt;/strong&gt; emerges, an extension language for Blub that transpiles to Glorp. All your Blub code is automatically Blubx code.&lt;/li&gt;&#xA;&lt;li&gt;Blubx takes the world by storm. People trip over themselves to write transpilers, minifiers, optimizers, linkers (aka. macroexpand) for Blubx.&lt;/li&gt;&#xA;&lt;li&gt;$BIG_COMPANY_HERE adopts Blubx. Giant codebases are written in Blubx. Papers are written about Blubx. You can get a career in Blubx.&lt;/li&gt;&#xA;&lt;li&gt;The cracks in Blubx start to show. Users complain that it is still too slow, devs complain that the transpilation process is too confusing.&lt;/li&gt;&#xA;&lt;li&gt;Not to worry, Blubx now has a swath of consultants, ready to help you tidy up your codebase and optimize your Blubx code for Glorp. All for the low, low price of $300/h.&lt;/li&gt;&#xA;&lt;li&gt;Finally having had enough, %SENIOR_DEV% quits &lt;code&gt;$PRONOUN&lt;/code&gt; Blubx job, takes a 2 year sabbatical, and thinks to &lt;code&gt;$REFLEXIVE_PRONOUN&lt;/code&gt;: How can we &lt;em&gt;really&lt;/em&gt; solve the problems of the Glorp domain?&lt;/li&gt;&#xA;&lt;li&gt;GOTO 1.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Software is getting slower, more rapidly than hardware is becoming faster.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brian Harry on Resource Management in .NET (2000)</title>
      <link>https://thomastay.dev/blog/brada_on_resource_management/</link>
      <pubDate>Mon, 17 Aug 2020 22:47:39 +0800</pubDate>
      <guid>https://thomastay.dev/blog/brada_on_resource_management/</guid>
      <description>&lt;p&gt;The following email is written by Brian Harry and published by Brad Abrams (brada), written in 2000. It&amp;rsquo;s about the .NET runtime (C#, F#, VB),&#xA;and why they decided to go with Garbage collection instead of sticking with reference counting.&#xA;Worth a read if you&amp;rsquo;re interested in the debate between GC systems vs Ref Counted systems.&lt;/p&gt;&#xA;&lt;p&gt;The question is all the more relevant these days (2020), with Ref Counted systems in vogue and GC out of fashion. Languages like Rust and Swift are popularizing the idea of a ref-counted only language, and languages like D and Nim are trying to introduce borrowing and pure ref-counting into their languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Causal Messaging by example</title>
      <link>https://thomastay.dev/blog/causal_messaging/</link>
      <pubDate>Fri, 17 Jul 2020 12:00:00 +0800</pubDate>
      <guid>https://thomastay.dev/blog/causal_messaging/</guid>
      <description>&lt;p&gt;When people first build a distributed system, they normally think of FIFO messaging, or maybe they build their system to be linearizable. But there&amp;rsquo;s an in-betweener, and that&amp;rsquo;s causal messaging.&lt;/p&gt;&#xA;&lt;p&gt;Instead of giving you the definition, which is pretty mathematical, I&amp;rsquo;ll let you read it on your own, and I&amp;rsquo;ll give a real life example that you can hopefully grok.&lt;/p&gt;&#xA;&lt;p&gt;Causal messaging is pretty important for some types of distributed systems. It&amp;rsquo;s used in implementing reference counting in the Pony runtime, for implementing sane Logging systems, and generally just making sure that your system makes sense, without full linearizability. You probably already use a Causal messaging system without knowing it &amp;mdash; synchronous gRPC calls basically almost guarantees causal messaging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pony actors don&#39;t have (their own) stacks</title>
      <link>https://thomastay.dev/blog/pony_actors_no_stacks/</link>
      <pubDate>Fri, 12 Jun 2020 12:00:00 +0800</pubDate>
      <guid>https://thomastay.dev/blog/pony_actors_no_stacks/</guid>
      <description>&lt;p&gt;In this short article I&amp;rsquo;m going to talk about how &lt;a href=&#34;https://ponylang.io&#34;&gt;Pony&lt;/a&gt; gets away with not storing a stack for each of its actors. I was pretty surprised to find this out, given that in most actor model languages actors have their own stacks. For instance, in Go, Goroutines have a stack size of 2KB. Elixir/Erlang processes have a 1.2KB combined stack and heap.&#xA;But surprisingly, Pony&amp;rsquo;s actors don&amp;rsquo;t have their own stacks! Instead, they use the stack of the OS thread that they&amp;rsquo;re running on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lessons learnt from optimizing a graph algorithm in F sharp</title>
      <link>https://thomastay.dev/blog/optimizing_graph_algo_fsharp/</link>
      <pubDate>Tue, 02 Jun 2020 22:12:51 -0600</pubDate>
      <guid>https://thomastay.dev/blog/optimizing_graph_algo_fsharp/</guid>
      <description>&lt;p&gt;In this article I&amp;rsquo;m going to share how I optimized a graph algorithms interview question down from &lt;strong&gt;58s&lt;/strong&gt; down to &lt;strong&gt;1.2s&lt;/strong&gt;, nearly a 50x improvement! &lt;em&gt;TLDR&lt;/em&gt;: Use the right data structures, exploit &lt;strong&gt;cache&lt;/strong&gt; efficiency, and &lt;strong&gt;do less work&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For those unaware, F# is a &lt;em&gt;functional-first language that runs on the .NET platform (think C#)&lt;/em&gt;. Despite the title of the article, very little of the optimization techniques applies solely to F#, and so I have intentionally wrote this article to make it comprehensible &lt;strong&gt;even if&lt;/strong&gt; you don&amp;rsquo;t understand a line of code in the article.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
