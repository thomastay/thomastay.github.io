<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thomas Tay&#39;s blog</title>
    <link>https://ttay.me/blog/</link>
    <description>Recent content on Thomas Tay&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ttay.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pony actors don&#39;t have (their own) stacks</title>
      <link>https://ttay.me/blog/pony_actors_no_stacks/</link>
      <pubDate>Fri, 12 Jun 2020 12:00:00 +0800</pubDate>
      
      <guid>https://ttay.me/blog/pony_actors_no_stacks/</guid>
      <description>In this short article I&amp;rsquo;m going to talk about how Pony gets away with not storing a stack for each of its actors. I was pretty surprised to find this out, given that in most actor model languages actors have their own stacks. For instance, in Go, Goroutines have a stack size of 2KB. Elixir/Erlang processes have a 1.2KB combined stack and heap. But surprisingly, Pony&amp;rsquo;s actors don&amp;rsquo;t have their own stacks!</description>
    </item>
    
    <item>
      <title>Lessons learnt from optimizing a graph algorithm in F sharp</title>
      <link>https://ttay.me/blog/optimizing_graph_algo_fsharp/</link>
      <pubDate>Tue, 02 Jun 2020 22:12:51 -0600</pubDate>
      
      <guid>https://ttay.me/blog/optimizing_graph_algo_fsharp/</guid>
      <description>In this article I&amp;rsquo;m going to share how I optimized a graph algorithms interview question down from 58s down to 1.2s, nearly a 50x improvement! TLDR: Use the right data structures, exploit cache efficiency, and do less work.
For those unaware, F# is a functional-first language that runs on the .NET platform (think C#). Despite the title of the article, very little of the optimization techniques applies solely to F#, and so I have intentionally wrote this article to make it comprehensible even if you don&amp;rsquo;t understand a line of code in the article.</description>
    </item>
    
  </channel>
</rss>